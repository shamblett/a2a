/*
* Package : a2a
* Author : S. Hamblett <steve.hamblett@linux.com>
* Date   : 10/07/2025
* Copyright :  S.Hamblett
*/

part of '../../types.dart';

/// Mirrors the OpenAPI Security Scheme Object
/// (https://swagger.io/specification/#security-scheme-object)
sealed class A2ASecurityScheme {}

/// API Key security scheme.
final class A2AAPIKeySecurityScheme extends A2ASecurityScheme {
  /// Description of this security scheme.
  String? description;

  /// The location of the API key. Valid values are "query", "header", or "cookie"
  /// Named 'in' in the TS code, Dart can't use this as its a reserved word..
  String location = '';

  /// The name of the header, query or cookie parameter to be used.
  String? name;
  final String type = 'apiKey';
}

/// HTTP Authentication security scheme.
final class A2AHTTPAuthSecurityScheme extends A2ASecurityScheme {
  /// A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually
  /// generated by an authorization server, so this information is primarily for documentation
  /// purposes.
  String? headerFormat;

  /// Description of this security scheme.
  String? description;

  /// The name of the HTTP Authentication scheme to be used in the Authorization header as defined
  /// in RFC7235. The values used SHOULD be registered in the IANA Authentication Scheme registry.
  /// The value is case-insensitive, as defined in RFC7235.
  String scheme = '';
  final type = 'http';
}

/// OAuth2.0 security scheme configuration.
final class A2AOAuth2SecurityScheme extends A2ASecurityScheme {
  /// Description of this security scheme.
  String? description;
  A2AOAuthFlows? flows;
  final type = 'oauth2';
}

/// An object containing configuration information for the flow types supported.
final class A2AOAuthFlows extends A2ASecurityScheme {
  A2AAuthorizationCodeOAuthFlow? authorizationCode;
  A2AClientCredentialsOAuthFlow? clientCredentials;
  A2AImplicitOAuthFlow? implicit;
  A2APasswordOAuthFlow? password;
}

/// Configuration for the OAuth Implicit flow
final class A2AImplicitOAuthFlow {
  /// The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2
  /// standard requires the use of TLS
  String authorizationUrl = '';

  /// The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2
  /// standard requires the use of TLS.
  String? refreshUrl;

  /// The available scopes for the OAuth2 security scheme. A map between the scope name and a short
  /// description for it. The map MAY be empty.
  Map<String, String> scopes = {};
}

/// Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0.
final class A2AAuthorizationCodeOAuthFlow {
  /// The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2
  /// standard requires the use of TLS
  String authorizationUrl = '';

  /// The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2
  /// standard requires the use of TLS.
  String? refreshUrl;

  /// The available scopes for the OAuth2 security scheme. A map between the scope name and a short
  /// description for it. The map MAY be empty.
  Map<String, String> scopes = {};

  /// The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard
  /// requires the use of TLS.
  String tokenUrl = '';
}

/// Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0
final class A2AClientCredentialsOAuthFlow {
  /// The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2
  /// standard requires the use of TLS.
  String refreshUrl = '';

  /// The available scopes for the OAuth2 security scheme. A map between the scope name and a short
  /// description for it. The map MAY be empty.
  Map<String, String> scopes = {};

  /// The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard
  /// requires the use of TLS.
  String tokenUrl = '';
}

/// Configuration for the OAuth Resource Owner Password flow
final class A2APasswordOAuthFlow {
  /// The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2
  /// standard requires the use of TLS.
  String refreshUrl = '';

  /// The available scopes for the OAuth2 security scheme. A map between the scope name and a short
  /// description for it. The map MAY be empty.
  Map<String, String> scopes = {};

  /// The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard
  /// requires the use of TLS.
  String tokenUrl = '';
}

/// OpenID Connect security scheme configuration.
final class A2AOpenIdConnectSecurityScheme extends A2ASecurityScheme {
  /// Description of this security scheme.
  String? description;

  /// Well-known URL to discover the [[OpenID-Connect-Discovery]] provider metadata.
  String openIdConnectUrl = '';
  final type = 'openIdConnect';
}
