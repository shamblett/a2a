/*
* Package : a2a
* Author : S. Hamblett <steve.hamblett@linux.com>
* Date   : 10/07/2025
* Copyright :  S.Hamblett
*/

part of '../../a2a_types.dart';


/// Defines a security scheme that can be used to secure an agent's endpoints.
/// This is a discriminated union type based on the OpenAPI 3.0 Security Scheme Object.
class A2ASecurityScheme {
  A2ASecurityScheme();

  factory A2ASecurityScheme.fromJson(Map<String, dynamic> json) {
    if (!json.containsKey('type')) {
      return A2ASecurityScheme();
    } else {
      switch (json['type']) {
        case 'apiKey':
          return A2AAPIKeySecurityScheme.fromJson(json);
        case 'http':
          return A2AHTTPAuthSecurityScheme.fromJson(json);
        case 'oauth2':
          return A2AOAuth2SecurityScheme.fromJson(json);
        case 'openIdConnect':
          return A2AOpenIdConnectSecurityScheme.fromJson(json);
        default:
          return A2ASecurityScheme();
      }
    }
  }

  Map<String, dynamic> toJson() => {};
}

/// API Key security scheme.
@JsonSerializable(explicitToJson: true)
final class A2AAPIKeySecurityScheme extends A2ASecurityScheme {
  /// Description of this security scheme.
  String? description;

  /// The location of the API key. Valid values are "query", "header", or "cookie"
  /// Named 'in' in the TS code, Dart can't use this as its a reserved word..
  String location = '';

  /// The name of the header, query or cookie parameter to be used.
  String? name;
  String type = 'apiKey';

  A2AAPIKeySecurityScheme();

  factory A2AAPIKeySecurityScheme.fromJson(Map<String, dynamic> json) =>
      _$A2AAPIKeySecuritySchemeFromJson(json);

  @override
  Map<String, dynamic> toJson() => _$A2AAPIKeySecuritySchemeToJson(this);
}

/// HTTP Authentication security scheme.
@JsonSerializable(explicitToJson: true)
final class A2AHTTPAuthSecurityScheme extends A2ASecurityScheme {
  /// A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually
  /// generated by an authorization server, so this information is primarily for documentation
  /// purposes.
  String? headerFormat;

  /// Description of this security scheme.
  String? description;

  /// The name of the HTTP Authentication scheme to be used in the Authorization header as defined
  /// in RFC7235. The values used SHOULD be registered in the IANA Authentication Scheme registry.
  /// The value is case-insensitive, as defined in RFC7235.
  String scheme = '';
  String type = 'http';

  A2AHTTPAuthSecurityScheme();

  factory A2AHTTPAuthSecurityScheme.fromJson(Map<String, dynamic> json) =>
      _$A2AHTTPAuthSecuritySchemeFromJson(json);

  @override
  Map<String, dynamic> toJson() => _$A2AHTTPAuthSecuritySchemeToJson(this);
}

/// OAuth2.0 security scheme configuration.
@JsonSerializable(explicitToJson: true)
final class A2AOAuth2SecurityScheme extends A2ASecurityScheme {
  /// Description of this security scheme.
  String? description;
  A2AOAuthFlows? flows;
  String type = 'oauth2';

  A2AOAuth2SecurityScheme();

  factory A2AOAuth2SecurityScheme.fromJson(Map<String, dynamic> json) =>
      _$A2AOAuth2SecuritySchemeFromJson(json);

  @override
  Map<String, dynamic> toJson() => _$A2AOAuth2SecuritySchemeToJson(this);
}

/// OpenID Connect security scheme configuration.
@JsonSerializable(explicitToJson: true)
final class A2AOpenIdConnectSecurityScheme extends A2ASecurityScheme {
  /// Description of this security scheme.
  String? description;

  /// Well-known URL to discover the [[OpenID-Connect-Discovery]] provider metadata.
  String openIdConnectUrl = '';
  String type = 'openIdConnect';

  A2AOpenIdConnectSecurityScheme();

  factory A2AOpenIdConnectSecurityScheme.fromJson(Map<String, dynamic> json) =>
      _$A2AOpenIdConnectSecuritySchemeFromJson(json);

  @override
  Map<String, dynamic> toJson() => _$A2AOpenIdConnectSecuritySchemeToJson(this);
}

/// An object containing configuration information for the flow types supported.
@JsonSerializable(explicitToJson: true)
final class A2AOAuthFlows {
  A2AAuthorizationCodeOAuthFlow? authorizationCode;
  A2AClientCredentialsOAuthFlow? clientCredentials;
  A2AImplicitOAuthFlow? implicit;
  A2APasswordOAuthFlow? password;

  A2AOAuthFlows();

  factory A2AOAuthFlows.fromJson(Map<String, dynamic> json) =>
      _$A2AOAuthFlowsFromJson(json);

  Map<String, dynamic> toJson() => _$A2AOAuthFlowsToJson(this);
}

/// Configuration for the OAuth Implicit flow
@JsonSerializable(explicitToJson: true)
final class A2AImplicitOAuthFlow {
  /// The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2
  /// standard requires the use of TLS
  String authorizationUrl = '';

  /// The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2
  /// standard requires the use of TLS.
  String? refreshUrl;

  /// The available scopes for the OAuth2 security scheme. A map between the scope name and a short
  /// description for it. The map MAY be empty.
  Map<String, String> scopes = {};

  A2AImplicitOAuthFlow();

  factory A2AImplicitOAuthFlow.fromJson(Map<String, dynamic> json) =>
      _$A2AImplicitOAuthFlowFromJson(json);

  Map<String, dynamic> toJson() => _$A2AImplicitOAuthFlowToJson(this);
}

/// Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0.
@JsonSerializable(explicitToJson: true)
final class A2AAuthorizationCodeOAuthFlow {
  /// The authorization URL to be used for this flow. This MUST be in the form of a URL. The OAuth2
  /// standard requires the use of TLS
  String authorizationUrl = '';

  /// The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2
  /// standard requires the use of TLS.
  String? refreshUrl;

  /// The available scopes for the OAuth2 security scheme. A map between the scope name and a short
  /// description for it. The map MAY be empty.
  Map<String, String> scopes = {};

  /// The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard
  /// requires the use of TLS.
  String tokenUrl = '';

  A2AAuthorizationCodeOAuthFlow();

  factory A2AAuthorizationCodeOAuthFlow.fromJson(Map<String, dynamic> json) =>
      _$A2AAuthorizationCodeOAuthFlowFromJson(json);

  Map<String, dynamic> toJson() => _$A2AAuthorizationCodeOAuthFlowToJson(this);
}

/// Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0
@JsonSerializable(explicitToJson: true)
final class A2AClientCredentialsOAuthFlow {
  /// The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2
  /// standard requires the use of TLS.
  String refreshUrl = '';

  /// The available scopes for the OAuth2 security scheme. A map between the scope name and a short
  /// description for it. The map MAY be empty.
  Map<String, String> scopes = {};

  /// The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard
  /// requires the use of TLS.
  String tokenUrl = '';

  A2AClientCredentialsOAuthFlow();

  factory A2AClientCredentialsOAuthFlow.fromJson(Map<String, dynamic> json) =>
      _$A2AClientCredentialsOAuthFlowFromJson(json);

  Map<String, dynamic> toJson() => _$A2AClientCredentialsOAuthFlowToJson(this);
}

/// Configuration for the OAuth Resource Owner Password flow
@JsonSerializable(explicitToJson: true)
final class A2APasswordOAuthFlow {
  /// The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2
  /// standard requires the use of TLS.
  String refreshUrl = '';

  /// The available scopes for the OAuth2 security scheme. A map between the scope name and a short
  /// description for it. The map MAY be empty.
  Map<String, String> scopes = {};

  /// The token URL to be used for this flow. This MUST be in the form of a URL. The OAuth2 standard
  /// requires the use of TLS.
  String tokenUrl = '';

  A2APasswordOAuthFlow();

  factory A2APasswordOAuthFlow.fromJson(Map<String, dynamic> json) =>
      _$A2APasswordOAuthFlowFromJson(json);

  Map<String, dynamic> toJson() => _$A2APasswordOAuthFlowToJson(this);
}
