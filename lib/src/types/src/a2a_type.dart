/*
* Package : a2a
* Author : S. Hamblett <steve.hamblett@linux.com>
* Date   : 10/07/2025
* Copyright :  S.Hamblett
*/

part of '../a2a_types.dart';

class A2AType {}

/// The ID type, String or num.
typedef A2AId = Object;

/// Structured value type
typedef A2ASV = Map<String, dynamic>;

/// Result type
typedef A2AResult = Object;

typedef A2ATaskOrMessage = Object;

/// Agent Execution Event
typedef A2AAgentExecutionEvent = Object;

/// Transport handler response or async* function.
typedef A2AResponseOrGenerator = Object;

/// Represents the possible lifecycle states of a Task.
enum A2ATaskState {
  /// he task has been submitted and is awaiting execution.
  @JsonValue('submitted')
  submitted,

  /// The agent is actively working on the task
  @JsonValue('working')
  working,

  /// The task is paused and waiting for input from the user.
  @JsonValue('input-required')
  inputRequired,

  /// he task has been successfully completed.
  @JsonValue('completed')
  completed,

  /// The task has been canceled by the user.
  @JsonValue('canceled')
  canceled,

  /// The task failed due to an error during execution.
  @JsonValue('failed')
  failed,

  /// The task was rejected by the agent and was not started.
  @JsonValue('rejected')
  rejected,

  /// The task requires authentication to proceed.
  @JsonValue('auth-required')
  authRequired,

  ///  The task is in an unknown or indeterminate state.
  @JsonValue('unknown')
  unknown,
}

/// Represents a single message in the conversation between a user and an agent
@JsonSerializable(explicitToJson: true)
class A2AMessage {
  /// The context ID for this message, used to group related interactions.
  String? contextId;

  /// The URIs of extensions that are present or contributed to this Message.
  List<String>? extensions;

  /// The type of this object, used as a discriminator. Always 'message' for a Message.
  @JsonKey(includeToJson: true, includeFromJson: false)
  String kind = 'message';

  /// A unique identifier for the message, typically a UUID, generated by the sender.
  String messageId = '';

  /// Optional metadata for extensions. The key is an extension-specific identifier.
  A2ASV? metadata;

  /// An array of content parts that form the message body. A message can be
  /// composed of multiple parts of different types [A2ATextPart],
  /// [A2ADataPart] or [A2AFilePart].
  List<A2APart>? parts = [];

  /// A list of other task IDs that this message references for additional context.
  List<String>? referenceTaskIds;

  /// Identifies the sender of the message. `user` for the client,
  /// `agent` for the service.
  String role = 'agent';

  /// The ID of the task this message is part of.
  /// Can be omitted for the first message of a new task.
  String? taskId;

  @override
  int get hashCode => messageId.hashCode;

  A2AMessage();

  factory A2AMessage.fromJson(Map<String, dynamic> json) =>
      _$A2AMessageFromJson(json);

  Map<String, dynamic> toJson() => _$A2AMessageToJson(this);

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is A2AMessage &&
          runtimeType == other.runtimeType &&
          messageId == other.messageId;
}

/// Represents a file, data structure, or other resource generated by an agent during a task.
@JsonSerializable(explicitToJson: true)
class A2AArtifact {
  /// A unique identifier (e.g. UUID) for the artifact within the scope of the task.
  String artifactId = '';

  /// Optional description for the artifact.
  String? description;

  /// The URIs of extensions that are present or contributed to this Artifact.
  List<String>? extensions;

  /// Extension metadata.
  A2ASV? metadata;

  /// Optional name for the artifact.
  String? name;

  /// Artifact parts
  List<A2APart> parts = [];

  @override
  int get hashCode => artifactId.hashCode;

  A2AArtifact();

  factory A2AArtifact.fromJson(Map<String, dynamic> json) =>
      _$A2AArtifactFromJson(json);

  Map<String, dynamic> toJson() => _$A2AArtifactToJson(this);

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is A2AArtifact &&
          runtimeType == other.runtimeType &&
          artifactId == other.artifactId;
}

/// Represents a single, stateful operation or conversation between a client and an agent.
@JsonSerializable(explicitToJson: true)
class A2ATask {
  /// A collection of artifacts generated by the agent during the execution of the task.
  List<A2AArtifact>? artifacts;

  /// A server-generated unique identifier (e.g. UUID) for maintaining
  /// context across multiple related tasks or interactions.
  String contextId = '';

  ///  An array of messages exchanged during the task, representing the conversation history.
  List<A2AMessage>? history;

  /// A unique identifier (e.g. UUID) for the task, generated by the server for a new task.
  String id = '';

  /// The type of this object, used as a discriminator. Always 'task' for a Task.
  @JsonKey(includeToJson: true, includeFromJson: false)
  String kind = 'task';

  /// Optional metadata for extensions. The key is an extension-specific identifier.
  A2ASV? metadata;

  /// The current status of the task, including its state and a descriptive message
  A2ATaskStatus? status;

  A2ATask();

  factory A2ATask.fromJson(Map<String, dynamic> json) =>
      _$A2ATaskFromJson(json);

  Map<String, dynamic> toJson() => _$A2ATaskToJson(this);

  /// Deep clone.
  A2ATask clone() {
    // Take advantage of the fact we can serialize these classes
    final thisJson = toJson();
    return A2ATask.fromJson(thisJson);
  }
}

/// Represents the status of a task at a specific point in time.
@JsonSerializable(explicitToJson: true)
class A2ATaskStatus {
  /// An optional, human-readable message providing more details about
  /// the current status.
  A2AMessage? message;

  /// The current state of the task's lifecycle.
  A2ATaskState? state;

  /// ISO 8601 datetime string indicating when the status was recorded.
  String? timestamp;

  A2ATaskStatus();

  factory A2ATaskStatus.fromJson(Map<String, dynamic> json) =>
      _$A2ATaskStatusFromJson(json);

  Map<String, dynamic> toJson() => _$A2ATaskStatusToJson(this);
}

/// Common JSON error response mixin
mixin A2AJSONRPCErrorResponseM {
  A2AError? error;

  /// An identifier established by the Client that MUST contain a String, Number.
  /// Numbers SHOULD NOT contain fractional parts.
  A2AId? id;

  /// Specifies the version of the JSON-RPC protocol. MUST be exactly "2.0".
  @JsonKey(includeToJson: true, includeFromJson: false)
  String jsonrpc = '2.0';
}

/// Represents a JSON-RPC 2.0 Request object.
@JsonSerializable(explicitToJson: true)
class A2AJsonRpcRequest {
  /// An identifier established by the Client that MUST contain a String, Number.
  /// Numbers SHOULD NOT contain fractional parts.
  A2AId? id;

  /// Specifies the version of the JSON-RPC protocol. MUST be exactly "2.0".
  @JsonKey(includeToJson: true, includeFromJson: false)
  String jsonrpc = '2.0';

  /// A String containing the name of the method to be invoked.
  String method = 'get';

  /// A Structured value that holds the parameter values to be used during the invocation of the method.
  A2ASV? params;

  A2AJsonRpcRequest();

  factory A2AJsonRpcRequest.fromJson(Map<String, dynamic> json) =>
      _$A2AJsonRpcRequestFromJson(json);

  Map<String, dynamic> toJson() => _$A2AJsonRpcRequestToJson(this);
}
